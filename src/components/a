<head>
    <meta charset="utf-8">
    <title>line1</title>
        <style>
            * {
            margin: 0;
            padding: 0;
            }
            html,body {
                overflow: hidden;
                height: 100%;
            }
        </style>
</head>
    
    <body>
    <div id="WebGL-output"></div>
<script type="module">
    import * as THREE from'https://unpkg.com/three@0.126.1/build/three.module.js';
    import { OrbitControls } from 'https://unpkg.com/three@0.126.1/examples/jsm/controls/OrbitControls.js';

    let  camera;
    let scene;
    let renderer;
    let dirLight;
    let gridHelper;
    let axisHelper;

    init();
    animate();

    function init() {

        //シーンの作成
        scene = new THREE.Scene();

        //カメラの作成
        camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 0.1, 1000);
        //カメラセット
        camera.position.set(20, 30, 50);
        camera.lookAt(new THREE.Vector3(0, 0, 0));

        //光源
        dirLight = new THREE.SpotLight(0xffffff,1.5);//color,強度
            dirLight.position.set(-30, 40, 30);
            scene.add(dirLight);

        
        //レンダラー
        renderer = new THREE.WebGLRenderer({ 
            alpha: true,
            antialias: true
        });
        renderer.setClearColor(new THREE.Color(0x000000));
        renderer.setSize(window.innerWidth, window.innerHeight);  
        
        // 滑らかにカメラコントローラーを制御する
        const controls = new OrbitControls(camera, document.body);
        controls.enableDamping = true;
        controls.dampingFactor = 0.2;

        // gridHelper 
        gridHelper = new THREE.GridHelper(80, 50,0xffff00) //大きさ・分割数・センタラインcolor・マスカラ―
        scene.add(gridHelper);

        // axisHelper
        axisHelper = new THREE.AxisHelper(50);  // 軸のサイズ
        scene.add(axisHelper);


        //頂点座標の配列(line)
        const points = [];
        points.push(new THREE.Vector3(-10,3,0));
        points.push(new THREE.Vector3(10,10,0));
        
        //頂点座標の配列からBufferGeometryを生成
        const geometry = new THREE.BufferGeometry().setFromPoints(points);
        const material = new THREE.LineBasicMaterial();
        const line = new THREE.Line(geometry,material);                 
        scene.add(line);

        document.getElementById("WebGL-output").appendChild(renderer.domElement);
    }
    function animate() {
        requestAnimationFrame(animate);
        renderer.render(scene, camera);
    }
    
    </script>

</body>
</html>